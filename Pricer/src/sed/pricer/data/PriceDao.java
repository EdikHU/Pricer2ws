package sed.pricer.data;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import sed.pricer.data.Price;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table T_PRICES.
*/
public class PriceDao extends AbstractDao<Price, Long> {

    public static final String TABLENAME = "T_PRICES";

    /**
     * Properties of entity Price.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cost = new Property(1, Float.class, "cost", false, "COST");
        public final static Property Date = new Property(2, java.util.Date.class, "date", false, "DATE");
        public final static Property ShopID = new Property(3, Long.class, "shopID", false, "SHOP_ID");
        public final static Property ProductId = new Property(4, Long.class, "productId", false, "PRODUCT_ID");
    };

    private DaoSession daoSession;

    private Query<Price> product_PricesQuery;

    public PriceDao(DaoConfig config) {
        super(config);
    }
    
    public PriceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'T_PRICES' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'COST' REAL," + // 1: cost
                "'DATE' INTEGER," + // 2: date
                "'SHOP_ID' INTEGER," + // 3: shopID
                "'PRODUCT_ID' INTEGER);"); // 4: productId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'T_PRICES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Price entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Float cost = entity.getCost();
        if (cost != null) {
            stmt.bindDouble(2, cost);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(3, date.getTime());
        }
 
        Long shopID = entity.getShopID();
        if (shopID != null) {
            stmt.bindLong(4, shopID);
        }
 
        Long productId = entity.getProductId();
        if (productId != null) {
            stmt.bindLong(5, productId);
        }
    }

    @Override
    protected void attachEntity(Price entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Price readEntity(Cursor cursor, int offset) {
        Price entity = new Price( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // cost
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // date
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // shopID
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // productId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Price entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCost(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setShopID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setProductId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Price entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Price entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "prices" to-many relationship of Product. */
    public List<Price> _queryProduct_Prices(Long productId) {
        synchronized (this) {
            if (product_PricesQuery == null) {
                QueryBuilder<Price> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProductId.eq(null));
                queryBuilder.orderRaw("DATE ASC");
                product_PricesQuery = queryBuilder.build();
            }
        }
        Query<Price> query = product_PricesQuery.forCurrentThread();
        query.setParameter(0, productId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getShopDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getProductDao().getAllColumns());
            builder.append(" FROM T_PRICES T");
            builder.append(" LEFT JOIN T_SHOPS T0 ON T.'SHOP_ID'=T0.'_id'");
            builder.append(" LEFT JOIN T_PRODUCT T1 ON T.'PRODUCT_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Price loadCurrentDeep(Cursor cursor, boolean lock) {
        Price entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Shop shop = loadCurrentOther(daoSession.getShopDao(), cursor, offset);
        entity.setShop(shop);
        offset += daoSession.getShopDao().getAllColumns().length;

        Product product = loadCurrentOther(daoSession.getProductDao(), cursor, offset);
        entity.setProduct(product);

        return entity;    
    }

    public Price loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Price> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Price> list = new ArrayList<Price>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Price> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Price> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
