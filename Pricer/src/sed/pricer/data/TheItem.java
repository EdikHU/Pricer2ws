package sed.pricer.data;

import java.util.List;
import sed.pricer.data.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table T_THE_ITEM.
 */
public class TheItem {

    private Long id;
    private String name;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TheItemDao myDao;

    private List<Relation> holders;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public TheItem() {
    }

    public TheItem(Long id) {
        this.id = id;
    }

    public TheItem(Long id, String name) {
        this.id = id;
        this.name = name;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTheItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Relation> getHolders() {
        if (holders == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RelationDao targetDao = daoSession.getRelationDao();
            List<Relation> holdersNew = targetDao._queryTheItem_Holders(id);
            synchronized (this) {
                if(holders == null) {
                    holders = holdersNew;
                }
            }
        }
        return holders;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetHolders() {
        holders = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
	@Override
	public String toString() {
		return "item [" + id + "][" + name + "]";
	}
    // KEEP METHODS END

}
