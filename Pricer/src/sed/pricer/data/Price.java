package sed.pricer.data;

import java.io.Serializable;

import sed.pricer.data.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table T_PRICES.
 */
public class Price implements Serializable{

    private Long id;
    private Float cost;
    private java.util.Date date;
    private Long shopID;
    private Long productId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PriceDao myDao;

    private Shop shop;
    private Long shop__resolvedKey;

    private Product product;
    private Long product__resolvedKey;


    // KEEP FIELDS - put your custom fields here
	private static final long serialVersionUID = -2078215733009044734L;
    // KEEP FIELDS END

    public Price() {
    }

    public Price(Long id) {
        this.id = id;
    }

    public Price(Long id, Float cost, java.util.Date date, Long shopID, Long productId) {
        this.id = id;
        this.cost = cost;
        this.date = date;
        this.shopID = shopID;
        this.productId = productId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPriceDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Float getCost() {
        return cost;
    }

    public void setCost(Float cost) {
        this.cost = cost;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Long getShopID() {
        return shopID;
    }

    public void setShopID(Long shopID) {
        this.shopID = shopID;
    }

    public Long getProductId() {
        return productId;
    }

    public void setProductId(Long productId) {
        this.productId = productId;
    }

    /** To-one relationship, resolved on first access. */
    public Shop getShop() {
        Long __key = this.shopID;
        if (shop__resolvedKey == null || !shop__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ShopDao targetDao = daoSession.getShopDao();
            Shop shopNew = targetDao.load(__key);
            synchronized (this) {
                shop = shopNew;
            	shop__resolvedKey = __key;
            }
        }
        return shop;
    }

    public void setShop(Shop shop) {
        synchronized (this) {
            this.shop = shop;
            shopID = shop == null ? null : shop.getId();
            shop__resolvedKey = shopID;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Product getProduct() {
        Long __key = this.productId;
        if (product__resolvedKey == null || !product__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProductDao targetDao = daoSession.getProductDao();
            Product productNew = targetDao.load(__key);
            synchronized (this) {
                product = productNew;
            	product__resolvedKey = __key;
            }
        }
        return product;
    }

    public void setProduct(Product product) {
        synchronized (this) {
            this.product = product;
            productId = product == null ? null : product.getId();
            product__resolvedKey = productId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
	@Override
	public String toString() {
		return "Price [id=" + id + ", cost=" + cost + ", date=" + date
				+ ", shopID=" + shopID + ", shop=" + getShop()
				+ ", shop__resolvedKey=" + shop__resolvedKey + "]\n ";
	}
    // KEEP METHODS END

}
