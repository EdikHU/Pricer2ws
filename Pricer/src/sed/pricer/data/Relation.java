package sed.pricer.data;

import sed.pricer.data.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table T_THE_RELATION.
 */
public class Relation {

    private Long id;
    private Long relation_theHolderId;
    private Long relation_theItemId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RelationDao myDao;

    private TheItem theItem;
    private Long theItem__resolvedKey;

    private TheHolder theHolder;
    private Long theHolder__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Relation() {
    }

    public Relation(Long id) {
        this.id = id;
    }

    public Relation(Long id, Long relation_theHolderId, Long relation_theItemId) {
        this.id = id;
        this.relation_theHolderId = relation_theHolderId;
        this.relation_theItemId = relation_theItemId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRelationDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getRelation_theHolderId() {
        return relation_theHolderId;
    }

    public void setRelation_theHolderId(Long relation_theHolderId) {
        this.relation_theHolderId = relation_theHolderId;
    }

    public Long getRelation_theItemId() {
        return relation_theItemId;
    }

    public void setRelation_theItemId(Long relation_theItemId) {
        this.relation_theItemId = relation_theItemId;
    }

    /** To-one relationship, resolved on first access. */
    public TheItem getTheItem() {
        Long __key = this.relation_theItemId;
        if (theItem__resolvedKey == null || !theItem__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TheItemDao targetDao = daoSession.getTheItemDao();
            TheItem theItemNew = targetDao.load(__key);
            synchronized (this) {
                theItem = theItemNew;
            	theItem__resolvedKey = __key;
            }
        }
        return theItem;
    }

    public void setTheItem(TheItem theItem) {
        synchronized (this) {
            this.theItem = theItem;
            relation_theItemId = theItem == null ? null : theItem.getId();
            theItem__resolvedKey = relation_theItemId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public TheHolder getTheHolder() {
        Long __key = this.relation_theHolderId;
        if (theHolder__resolvedKey == null || !theHolder__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TheHolderDao targetDao = daoSession.getTheHolderDao();
            TheHolder theHolderNew = targetDao.load(__key);
            synchronized (this) {
                theHolder = theHolderNew;
            	theHolder__resolvedKey = __key;
            }
        }
        return theHolder;
    }

    public void setTheHolder(TheHolder theHolder) {
        synchronized (this) {
            this.theHolder = theHolder;
            relation_theHolderId = theHolder == null ? null : theHolder.getId();
            theHolder__resolvedKey = relation_theHolderId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
	@Override
	public String toString() {
		return "R["+id+"] H["+daoSession.getTheHolderDao().loadByRowId(getRelation_theHolderId()).getId()+"]("+getTheHolder().getId()+") I["+daoSession.getTheItemDao().loadByRowId(getRelation_theItemId()).getName()+"]("+getTheItem().getId()+")\n" ;
	}
    // KEEP METHODS END

}
